(dp1
S'output'
p2
S'<type \'exceptions.SyntaxError\'> Field: invalid table name: 1post, use rname for "funny" names'
p3
sS'layer'
p4
S'C:\\Users\\PeAce\\Desktop\\web2py\\applications\\381spmch1\\models\\db.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\n## app configuration made easy. Look inside private/appconfig.ini\nfrom gluon.contrib.appconfig import AppConfig\n## once in production, remove reload=True to gain full speed\nmyconf = AppConfig(reload=True)\n\n\nif not request.env.web2py_runtime_gae:\n    ## if NOT running on Google App Engine use SQLite or other DB\n    db = DAL(myconf.take(\'db.uri\'), pool_size=myconf.take(\'db.pool_size\', cast=int), check_reserved=[\'all\'])\nelse:\n    ## connect to Google BigTable (optional \'google:datastore://namespace\')\n    db = DAL(\'google:datastore+ndb\')\n    ## store sessions and tickets there\n    session.connect(request, response, db=db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be \'controller/function.extension\'\nresponse.generic_patterns = [\'*\'] if request.is_local else []\n## choose a style for forms\nresponse.formstyle = myconf.take(\'forms.formstyle\')  # or \'bootstrap3_stacked\' or \'bootstrap2\' or other\nresponse.form_label_separator = myconf.take(\'forms.separator\')\n\n\n## (optional) optimize handling of static files\n# response.optimize_css = \'concat,minify,inline\'\n# response.optimize_js = \'concat,minify,inline\'\n## (optional) static assets folder versioning\n# response.static_version = \'0.0.0\'\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Service, PluginManager\n\nauth = Auth(db)\nservice = Service()\nplugins = PluginManager()\n\n## create all tables needed by auth if not custom tables\nauth.define_tables(username=False, signature=False)\n\n## configure email\nmail = auth.settings.mailer\nmail.settings.server = \'logging\' if request.is_local else myconf.take(\'smtp.server\')\nmail.settings.sender = myconf.take(\'smtp.sender\')\nmail.settings.login = myconf.take(\'smtp.login\')\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\n## after defining tables, uncomment below to enable auditing\n# auth.enable_record_versioning(db)\n\n##image blog\n\ndb = DAL("sqlite://storage.sqlite")\n\ndb.define_table(\'image\',\n   Field(\'title\', unique=True),\n   Field(\'file\', \'upload\'),\n   format = \'%(title)s\')\n\ndb.define_table(\'post\',\n   Field(\'image_id\', \'reference image\'),\n   Field(\'author\'),\n   Field(\'email\'),\n   Field(\'body\', \'text\'))\n\ndb.image.title.requires = IS_NOT_IN_DB(db, db.image.title)\ndb.post.image_id.requires = IS_IN_DB(db, db.image.id, \'%(title)s\')\ndb.post.author.requires = IS_NOT_EMPTY()\ndb.post.email.requires = IS_EMAIL()\ndb.post.body.requires = IS_NOT_EMPTY()\n\ndb.define_table(\'forSaleList\',\n               Field(\'Seller\',  requires=IS_NOT_EMPTY()),\n               Field(\'Email\', requires = IS_EMAIL(error_message=\'invalid email!\')),\n               Field(\'Phone\', requires = IS_MATCH(\'^1?((-)\\d{3}-?|\\(\\d{3}\\))\\d{3}-?\\d{4}$\',\n                      error_message=\'not a phone number\')),\n               Field(\'Date\',\'datetime\'),\n               Field(\'Title\', requires=IS_NOT_EMPTY()),\n               Field(\'Description\',\'text\'),\n               Field(\'Category\', \'string\', requires = IS_IN_SET\n                     ([\'Car\', \'Bike\', \'Book\', \'Music\', \'Outdoors\', \'Household\', \'Misc\'])),\n               Field(\'Priec\', \'double\', requires = IS_FLOAT_IN_RANGE(0, 100000.0,\n                      error_message=\'The price should be in the range 0..100000\')),\n               Field(\'Status\',\'boolean\', default=False),\n               Field(\'Image\', \'upload\'),\n               format = \'%(title)s\')\n\ndb.define_table(\'1post\',\n    Field(\'ucscClass_id\', \'reference ucscClass\', readable=False, writable=False),\n    Field(\'user_id\', \'reference  auth_user\', readable=False, writable=False),\n    Field(\'title\', \'string\', notnull=True),\n    Field(\'body\', \'text\', notnull=True),\n    Field(\'price\', \'integer\'), # price is in cents (eg 4000 -> $40)\n    Field(\'status\',\'boolean\', default=False),\n    Field(\'datetime\', \'datetime\', readable=False,writable=False,default=request.now),\n    Field(\'image\', \'upload\'),\n    format = \'%(title)s\')\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\PeAce\\Desktop\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Users\\PeAce\\Desktop\\web2py\\applications\\381spmch1\\models\\db.py", line 140, in <module>\n    format = \'%(title)s\')\n  File "C:\\Users\\PeAce\\Desktop\\web2py\\gluon\\packages\\dal\\pydal\\base.py", line 834, in define_table\n    table = self.lazy_define_table(tablename,*fields,**args)\n  File "C:\\Users\\PeAce\\Desktop\\web2py\\gluon\\packages\\dal\\pydal\\base.py", line 851, in lazy_define_table\n    table = table_class(self, tablename, *fields, **args)\n  File "C:\\Users\\PeAce\\Desktop\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 226, in __init__\n    \'use rname for "funny" names\' % tablename)\nSyntaxError: Field: invalid table name: 1post, use rname for "funny" names\n'
p11
s.